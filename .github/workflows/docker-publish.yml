# R4, R5: Original workflow.
# R27 (NEW): Separated build/cache from push to prevent "ghost layers" in the registry.
name: Build and Publish Docker Image to GHCR

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # R27: FIX - Step 1: Build the image, load it locally, and export the cache. DO NOT PUSH.
      - name: Build and cache Docker image
        id: build_and_cache
        uses: docker/build-push-action@v5
        with:
          context: .
          # Do not push to the registry in this step.
          push: false
          # Load the final image into the local Docker engine on the runner.
          load: true
          # Define the tags for the local image.
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
          # Still use the GHA cache for performance on subsequent runs.
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # R27: FIX - Step 2: Explicitly push the locally loaded image.
      # This simple push command has no knowledge of the build cache and will only push
      # the necessary layers for the final image.
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
